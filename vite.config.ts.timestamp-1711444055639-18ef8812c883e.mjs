// vite.config.ts
import { resolve } from "node:path";
import react from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { defineConfig } from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/vite/dist/node/index.js";
import dts from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/vite-plugin-dts/dist/index.mjs";
import * as EsLint from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/vite-plugin-linter/dist/index.mjs";
import tsConfigPaths from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/vite-tsconfig-paths/dist/index.mjs";

// package.json
var peerDependencies = {
  "@google-labs/breadboard": "^0.11.2"
};

// vite.config.ts
var { EsLinter, linterPlugin } = EsLint;
var peerDependencies2 = peerDependencies || {};
var vite_config_default = defineConfig((configEnv) => ({
  optimizeDeps: {
    esbuildOptions: {
      supported: {
        "top-level-await": true
      }
    }
  },
  plugins: [
    react(),
    tsConfigPaths(),
    linterPlugin({
      include: ["./src}/**/*.{ts,tsx}"],
      linters: [new EsLinter({ configEnv })]
    }),
    dts({
      include: ["src/components/"]
    })
  ],
  build: {
    target: "esnext",
    lib: {
      entry: resolve("src", "components/index.ts"),
      name: "React Breadboard Components",
      formats: ["es", "umd"],
      fileName: (format) => `index.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies2)]
    }
  },
  server: {
    port: 5173,
    strictPort: true,
    proxy: {
      "/v1/complete": {
        target: "https://api.anthropic.com",
        changeOrigin: true
      }
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2FsZXgvRGVza3RvcC9Qcm9qZWN0cy9icmVhZGJvYXJkLXJlcG9zL3JlYWN0LWJyZWFkYm9hcmQtY29tcG9uZW50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL2FsZXgvRGVza3RvcC9Qcm9qZWN0cy9icmVhZGJvYXJkLXJlcG9zL3JlYWN0LWJyZWFkYm9hcmQtY29tcG9uZW50cy92aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvYWxleC9EZXNrdG9wL1Byb2plY3RzL2JyZWFkYm9hcmQtcmVwb3MvcmVhY3QtYnJlYWRib2FyZC1jb21wb25lbnRzL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJub2RlOnBhdGhcIjtcblxuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiO1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCBkdHMgZnJvbSBcInZpdGUtcGx1Z2luLWR0c1wiO1xuaW1wb3J0ICogYXMgRXNMaW50IGZyb20gXCJ2aXRlLXBsdWdpbi1saW50ZXJcIjtcbmltcG9ydCB0c0NvbmZpZ1BhdGhzIGZyb20gXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI7XG5pbXBvcnQgKiBhcyBwYWNrYWdlSnNvbiBmcm9tIFwiLi9wYWNrYWdlLmpzb25cIjtcbmNvbnN0IHsgRXNMaW50ZXIsIGxpbnRlclBsdWdpbiB9ID0gRXNMaW50O1xuXG5jb25zdCBwZWVyRGVwZW5kZW5jaWVzID0gcGFja2FnZUpzb24ucGVlckRlcGVuZGVuY2llcyB8fCB7fTtcblxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoY29uZmlnRW52KSA9PiAoe1xuXHRvcHRpbWl6ZURlcHM6IHtcblx0XHRlc2J1aWxkT3B0aW9uczoge1xuXHRcdFx0c3VwcG9ydGVkOiB7XG5cdFx0XHRcdFwidG9wLWxldmVsLWF3YWl0XCI6IHRydWUsXG5cdFx0XHR9LFxuXHRcdH0sXG5cdH0sXG5cdHBsdWdpbnM6IFtcblx0XHRyZWFjdCgpLFxuXHRcdHRzQ29uZmlnUGF0aHMoKSxcblx0XHRsaW50ZXJQbHVnaW4oe1xuXHRcdFx0aW5jbHVkZTogW1wiLi9zcmN9LyoqLyoue3RzLHRzeH1cIl0sXG5cdFx0XHRsaW50ZXJzOiBbbmV3IEVzTGludGVyKHsgY29uZmlnRW52IH0pXSxcblx0XHR9KSxcblx0XHRkdHMoe1xuXHRcdFx0aW5jbHVkZTogW1wic3JjL2NvbXBvbmVudHMvXCJdLFxuXHRcdH0pLFxuXHRdLFxuXHRidWlsZDoge1xuXHRcdHRhcmdldDogXCJlc25leHRcIixcblx0XHRsaWI6IHtcblx0XHRcdGVudHJ5OiByZXNvbHZlKFwic3JjXCIsIFwiY29tcG9uZW50cy9pbmRleC50c1wiKSxcblx0XHRcdG5hbWU6IFwiUmVhY3QgQnJlYWRib2FyZCBDb21wb25lbnRzXCIsXG5cdFx0XHRmb3JtYXRzOiBbXCJlc1wiLCBcInVtZFwiXSxcblx0XHRcdGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBgaW5kZXguJHtmb3JtYXR9LmpzYCxcblx0XHR9LFxuXHRcdHJvbGx1cE9wdGlvbnM6IHtcblx0XHRcdGV4dGVybmFsOiBbLi4uT2JqZWN0LmtleXMocGVlckRlcGVuZGVuY2llcyldLFxuXHRcdH0sXG5cdH0sXG5cdHNlcnZlcjoge1xuXHRcdHBvcnQ6IDUxNzMsXG5cdFx0c3RyaWN0UG9ydDogdHJ1ZSxcblx0XHRwcm94eToge1xuXHRcdFx0XCIvdjEvY29tcGxldGVcIjoge1xuXHRcdFx0XHR0YXJnZXQ6IFwiaHR0cHM6Ly9hcGkuYW50aHJvcGljLmNvbVwiLFxuXHRcdFx0XHRjaGFuZ2VPcmlnaW46IHRydWUsXG5cdFx0XHR9LFxuXHRcdH0sXG5cdH0sXG59KSk7XG4iLCAie1xuXHRcImRlcGVuZGVuY2llc1wiOiB7XG5cdFx0XCJAZXhhZGV2L2JyZWFkYm9hcmQta2l0c1wiOiBcIl4wLjEwLjFcIixcblx0XHRcIkBnb29nbGUtbGFicy9icmVhZGJvYXJkLXVpXCI6IFwiXjAuMy4wXCIsXG5cdFx0XCJAZ29vZ2xlLWxhYnMvYnJlYWRib2FyZC13ZWJcIjogXCJeMS4zLjFcIixcblx0XHRcIkBsaXQvcmVhY3RcIjogXCJeMS4wLjNcIixcblx0XHRcImF4aW9zXCI6IFwiXjEuNi44XCIsXG5cdFx0XCJwdXBwZXRlZXJcIjogXCJeMjIuNi4xXCIsXG5cdFx0XCJyZWFjdFwiOiBcIl4xOC4yLjBcIixcblx0XHRcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjBcIlxuXHR9LFxuXHRcImRldkRlcGVuZGVuY2llc1wiOiB7XG5cdFx0XCJAdHlwZXMvbm9kZVwiOiBcIl4yMC4xMS4yMlwiLFxuXHRcdFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjIuNjBcIixcblx0XHRcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMi4xOVwiLFxuXHRcdFwiQHR5cGVzY3JpcHQtZXNsaW50L2VzbGludC1wbHVnaW5cIjogXCJeNy4xLjBcIixcblx0XHRcIkB0eXBlc2NyaXB0LWVzbGludC9wYXJzZXJcIjogXCJeNy4xLjBcIixcblx0XHRcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI6IFwiXjQuMi4xXCIsXG5cdFx0XCJlc2xpbnRcIjogXCJeOC41Ny4wXCIsXG5cdFx0XCJlc2xpbnQtcGx1Z2luLXJlYWN0LWhvb2tzXCI6IFwiXjQuNi4wXCIsXG5cdFx0XCJlc2xpbnQtcGx1Z2luLXJlYWN0LXJlZnJlc2hcIjogXCJeMC40LjVcIixcblx0XHRcInR5cGVzY3JpcHRcIjogXCJeNS4zLjNcIixcblx0XHRcInZpdGVcIjogXCJeNS4xLjRcIixcblx0XHRcInZpdGUtcGx1Z2luLWR0c1wiOiBcIl4zLjcuM1wiLFxuXHRcdFwidml0ZS1wbHVnaW4tbGludGVyXCI6IFwiXjIuMS4xXCIsXG5cdFx0XCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI6IFwiXjQuMy4xXCJcblx0fSxcblx0XCJleHBvcnRzXCI6IHtcblx0XHRcIi5cIjoge1xuXHRcdFx0XCJpbXBvcnRcIjogXCIuL2Rpc3QvaW5kZXguZXMuanNcIixcblx0XHRcdFwicmVxdWlyZVwiOiBcIi4vZGlzdC9pbmRleC51bWQuanNcIlxuXHRcdH0sXG5cdFx0XCIuL2Rpc3Qvc3R5bGUuY3NzXCI6IFwiLi9kaXN0L3N0eWxlLmNzc1wiXG5cdH0sXG5cdFwiZmlsZXNcIjogW1xuXHRcdFwiZGlzdFwiXG5cdF0sXG5cdFwibWFpblwiOiBcIi4vZGlzdC9pbmRleC51bWQuanNcIixcblx0XCJtb2R1bGVcIjogXCIuL2Rpc3QvaW5kZXguZXMuanNcIixcblx0XCJuYW1lXCI6IFwicmVhY3QtYnJlYWRib2FyZC1jb21wb25lbnRzXCIsXG5cdFwicGVlckRlcGVuZGVuY2llc1wiOiB7XG5cdFx0XCJAZ29vZ2xlLWxhYnMvYnJlYWRib2FyZFwiOiBcIl4wLjExLjJcIlxuXHR9LFxuXHRcInJlcG9zaXRvcnlcIjoge1xuXHRcdFwidHlwZVwiOiBcImdpdFwiLFxuXHRcdFwidXJsXCI6IFwiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9FeGFEZXYtaW8vcmVhY3QtYnJlYWRib2FyZC1jb21wb25lbnRzLmdpdFwiXG5cdH0sXG5cdFwic2NyaXB0c1wiOiB7XG5cdFx0XCJidWlsZFwiOiBcInRzYyAmJiB2aXRlIGJ1aWxkXCIsXG5cdFx0XCJkZXZcIjogXCJ2aXRlIC0tb3BlblwiLFxuXHRcdFwibGludFwiOiBcImVzbGludCAuIC0tZXh0IHRzLHRzeCAtLXJlcG9ydC11bnVzZWQtZGlzYWJsZS1kaXJlY3RpdmVzIC0tbWF4LXdhcm5pbmdzIDBcIixcblx0XHRcInByZXBhY2tcIjogXCJucG0gcnVuIGJ1aWxkXCIsXG5cdFx0XCJwcmVwdWJsaXNoT25seVwiOiBcImdpdCBwdXNoIC0tZm9sbG93LXRhZ3NcIixcblx0XHRcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXcgLS1vcGVuXCJcblx0fSxcblx0XCJ0eXBlXCI6IFwibW9kdWxlXCIsXG5cdFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiLFxuXHRcInZlcnNpb25cIjogXCIwLjAuMVwiXG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQTZZLFNBQVMsZUFBZTtBQUVyYSxPQUFPLFdBQVc7QUFDbEIsU0FBUyxvQkFBb0I7QUFDN0IsT0FBTyxTQUFTO0FBQ2hCLFlBQVksWUFBWTtBQUN4QixPQUFPLG1CQUFtQjs7O0FDa0N6Qix1QkFBb0I7QUFBQSxFQUNuQiwyQkFBMkI7QUFDNUI7OztBRGxDRCxJQUFNLEVBQUUsVUFBVSxhQUFhLElBQUk7QUFFbkMsSUFBTUEsb0JBQStCLG9CQUFvQixDQUFDO0FBRzFELElBQU8sc0JBQVEsYUFBYSxDQUFDLGVBQWU7QUFBQSxFQUMzQyxjQUFjO0FBQUEsSUFDYixnQkFBZ0I7QUFBQSxNQUNmLFdBQVc7QUFBQSxRQUNWLG1CQUFtQjtBQUFBLE1BQ3BCO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFBQSxFQUNBLFNBQVM7QUFBQSxJQUNSLE1BQU07QUFBQSxJQUNOLGNBQWM7QUFBQSxJQUNkLGFBQWE7QUFBQSxNQUNaLFNBQVMsQ0FBQyxzQkFBc0I7QUFBQSxNQUNoQyxTQUFTLENBQUMsSUFBSSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFBQSxJQUN0QyxDQUFDO0FBQUEsSUFDRCxJQUFJO0FBQUEsTUFDSCxTQUFTLENBQUMsaUJBQWlCO0FBQUEsSUFDNUIsQ0FBQztBQUFBLEVBQ0Y7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNOLFFBQVE7QUFBQSxJQUNSLEtBQUs7QUFBQSxNQUNKLE9BQU8sUUFBUSxPQUFPLHFCQUFxQjtBQUFBLE1BQzNDLE1BQU07QUFBQSxNQUNOLFNBQVMsQ0FBQyxNQUFNLEtBQUs7QUFBQSxNQUNyQixVQUFVLENBQUMsV0FBVyxTQUFTLE1BQU07QUFBQSxJQUN0QztBQUFBLElBQ0EsZUFBZTtBQUFBLE1BQ2QsVUFBVSxDQUFDLEdBQUcsT0FBTyxLQUFLQSxpQkFBZ0IsQ0FBQztBQUFBLElBQzVDO0FBQUEsRUFDRDtBQUFBLEVBQ0EsUUFBUTtBQUFBLElBQ1AsTUFBTTtBQUFBLElBQ04sWUFBWTtBQUFBLElBQ1osT0FBTztBQUFBLE1BQ04sZ0JBQWdCO0FBQUEsUUFDZixRQUFRO0FBQUEsUUFDUixjQUFjO0FBQUEsTUFDZjtBQUFBLElBQ0Q7QUFBQSxFQUNEO0FBQ0QsRUFBRTsiLAogICJuYW1lcyI6IFsicGVlckRlcGVuZGVuY2llcyJdCn0K
