// vite.config.ts
import { resolve } from "node:path";
import react from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { defineConfig } from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/vite/dist/node/index.js";
import dts from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/vite-plugin-dts/dist/index.mjs";
import * as EsLint from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/vite-plugin-linter/dist/index.mjs";
import tsConfigPaths from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/vite-tsconfig-paths/dist/index.mjs";

// package.json
var peerDependencies = {
  "@google-labs/breadboard": "^0.11.2"
};

// vite.config.ts
var { EsLinter, linterPlugin } = EsLint;
var peerDependencies2 = peerDependencies || {};
var vite_config_default = defineConfig((configEnv) => ({
  plugins: [
    react(),
    tsConfigPaths(),
    linterPlugin({
      include: ["./src}/**/*.{ts,tsx}"],
      linters: [new EsLinter({ configEnv })]
    }),
    dts({
      include: ["src/components/"]
    })
  ],
  build: {
    target: "es2015",
    lib: {
      entry: resolve("src", "components/index.ts"),
      name: "React Breadboard Components",
      formats: ["es", "umd"],
      fileName: (format) => `index.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies2)]
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2FsZXgvRGVza3RvcC9Qcm9qZWN0cy9icmVhZGJvYXJkLXJlcG9zL3JlYWN0LWJyZWFkYm9hcmQtY29tcG9uZW50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL2FsZXgvRGVza3RvcC9Qcm9qZWN0cy9icmVhZGJvYXJkLXJlcG9zL3JlYWN0LWJyZWFkYm9hcmQtY29tcG9uZW50cy92aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvYWxleC9EZXNrdG9wL1Byb2plY3RzL2JyZWFkYm9hcmQtcmVwb3MvcmVhY3QtYnJlYWRib2FyZC1jb21wb25lbnRzL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJub2RlOnBhdGhcIjtcblxuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiO1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCBkdHMgZnJvbSBcInZpdGUtcGx1Z2luLWR0c1wiO1xuaW1wb3J0ICogYXMgRXNMaW50IGZyb20gXCJ2aXRlLXBsdWdpbi1saW50ZXJcIjtcbmltcG9ydCB0c0NvbmZpZ1BhdGhzIGZyb20gXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI7XG5pbXBvcnQgKiBhcyBwYWNrYWdlSnNvbiBmcm9tIFwiLi9wYWNrYWdlLmpzb25cIjtcbmNvbnN0IHsgRXNMaW50ZXIsIGxpbnRlclBsdWdpbiB9ID0gRXNMaW50O1xuXG5jb25zdCBwZWVyRGVwZW5kZW5jaWVzID0gcGFja2FnZUpzb24ucGVlckRlcGVuZGVuY2llcyB8fCB7fTtcblxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoY29uZmlnRW52KSA9PiAoe1xuXHRwbHVnaW5zOiBbXG5cdFx0cmVhY3QoKSxcblx0XHR0c0NvbmZpZ1BhdGhzKCksXG5cdFx0bGludGVyUGx1Z2luKHtcblx0XHRcdGluY2x1ZGU6IFtcIi4vc3JjfS8qKi8qLnt0cyx0c3h9XCJdLFxuXHRcdFx0bGludGVyczogW25ldyBFc0xpbnRlcih7IGNvbmZpZ0VudiB9KV0sXG5cdFx0fSksXG5cdFx0ZHRzKHtcblx0XHRcdGluY2x1ZGU6IFtcInNyYy9jb21wb25lbnRzL1wiXSxcblx0XHR9KSxcblx0XSxcblx0YnVpbGQ6IHtcblx0XHR0YXJnZXQ6XCJlczIwMTVcIixcblx0XHRsaWI6IHtcblx0XHRcdGVudHJ5OiByZXNvbHZlKFwic3JjXCIsIFwiY29tcG9uZW50cy9pbmRleC50c1wiKSxcblx0XHRcdG5hbWU6IFwiUmVhY3QgQnJlYWRib2FyZCBDb21wb25lbnRzXCIsXG5cdFx0XHRmb3JtYXRzOiBbXCJlc1wiLCBcInVtZFwiXSxcblx0XHRcdGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBgaW5kZXguJHtmb3JtYXR9LmpzYCxcblx0XHR9LFxuXHRcdHJvbGx1cE9wdGlvbnM6IHtcblx0XHRcdGV4dGVybmFsOiBbLi4uT2JqZWN0LmtleXMocGVlckRlcGVuZGVuY2llcyldLFxuXHRcdH0sXG5cdH0sXG59KSk7XG4iLCAie1xuXHRcImRlcGVuZGVuY2llc1wiOiB7XG5cdFx0XCJAZ29vZ2xlLWxhYnMvYnJlYWRib2FyZC13ZWJcIjogXCJeMS4yLjJcIixcblx0XHRcIkBsaXQvcmVhY3RcIjogXCJeMS4wLjNcIixcblx0XHRcInJlYWN0XCI6IFwiXjE4LjIuMFwiLFxuXHRcdFwicmVhY3QtZG9tXCI6IFwiXjE4LjIuMFwiXG5cdH0sXG5cdFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcblx0XHRcIkB0eXBlcy9ub2RlXCI6IFwiXjIwLjExLjIyXCIsXG5cdFx0XCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMi42MFwiLFxuXHRcdFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4yLjE5XCIsXG5cdFx0XCJAdHlwZXNjcmlwdC1lc2xpbnQvZXNsaW50LXBsdWdpblwiOiBcIl43LjEuMFwiLFxuXHRcdFwiQHR5cGVzY3JpcHQtZXNsaW50L3BhcnNlclwiOiBcIl43LjEuMFwiLFxuXHRcdFwiQHZpdGVqcy9wbHVnaW4tcmVhY3RcIjogXCJeNC4yLjFcIixcblx0XHRcImVzbGludFwiOiBcIl44LjU3LjBcIixcblx0XHRcImVzbGludC1wbHVnaW4tcmVhY3QtaG9va3NcIjogXCJeNC42LjBcIixcblx0XHRcImVzbGludC1wbHVnaW4tcmVhY3QtcmVmcmVzaFwiOiBcIl4wLjQuNVwiLFxuXHRcdFwidHlwZXNjcmlwdFwiOiBcIl41LjMuM1wiLFxuXHRcdFwidml0ZVwiOiBcIl41LjEuNFwiLFxuXHRcdFwidml0ZS1wbHVnaW4tZHRzXCI6IFwiXjMuNy4zXCIsXG5cdFx0XCJ2aXRlLXBsdWdpbi1saW50ZXJcIjogXCJeMi4xLjFcIixcblx0XHRcInZpdGUtdHNjb25maWctcGF0aHNcIjogXCJeNC4zLjFcIlxuXHR9LFxuXHRcImV4cG9ydHNcIjoge1xuXHRcdFwiLlwiOiB7XG5cdFx0XHRcImltcG9ydFwiOiBcIi4vZGlzdC9pbmRleC5lcy5qc1wiLFxuXHRcdFx0XCJyZXF1aXJlXCI6IFwiLi9kaXN0L2luZGV4LnVtZC5qc1wiXG5cdFx0fSxcblx0XHRcIi4vZGlzdC9zdHlsZS5jc3NcIjogXCIuL2Rpc3Qvc3R5bGUuY3NzXCJcblx0fSxcblx0XCJmaWxlc1wiOiBbXG5cdFx0XCJkaXN0XCJcblx0XSxcblx0XCJtYWluXCI6IFwiLi9kaXN0L2luZGV4LnVtZC5qc1wiLFxuXHRcIm1vZHVsZVwiOiBcIi4vZGlzdC9pbmRleC5lcy5qc1wiLFxuXHRcIm5hbWVcIjogXCJyZWFjdC1icmVhZGJvYXJkLWNvbXBvbmVudHNcIixcblx0XCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcblx0XHRcIkBnb29nbGUtbGFicy9icmVhZGJvYXJkXCI6IFwiXjAuMTEuMlwiXG5cdH0sXG5cdFwicmVwb3NpdG9yeVwiOiB7XG5cdFx0XCJ0eXBlXCI6IFwiZ2l0XCIsXG5cdFx0XCJ1cmxcIjogXCJnaXQraHR0cHM6Ly9naXRodWIuY29tL0V4YURldi1pby9yZWFjdC1icmVhZGJvYXJkLWNvbXBvbmVudHMuZ2l0XCJcblx0fSxcblx0XCJzY3JpcHRzXCI6IHtcblx0XHRcImJ1aWxkXCI6IFwidHNjICYmIHZpdGUgYnVpbGRcIixcblx0XHRcImRldlwiOiBcInZpdGUgLS1vcGVuXCIsXG5cdFx0XCJsaW50XCI6IFwiZXNsaW50IC4gLS1leHQgdHMsdHN4IC0tcmVwb3J0LXVudXNlZC1kaXNhYmxlLWRpcmVjdGl2ZXMgLS1tYXgtd2FybmluZ3MgMFwiLFxuXHRcdFwicHJlcGFja1wiOiBcIm5wbSBydW4gYnVpbGRcIixcblx0XHRcInByZXB1Ymxpc2hPbmx5XCI6IFwiZ2l0IHB1c2ggLS1mb2xsb3ctdGFnc1wiLFxuXHRcdFwicHJldmlld1wiOiBcInZpdGUgcHJldmlldyAtLW9wZW5cIlxuXHR9LFxuXHRcInR5cGVcIjogXCJtb2R1bGVcIixcblx0XCJ0eXBlc1wiOiBcIi4vZGlzdC9pbmRleC5kLnRzXCIsXG5cdFwidmVyc2lvblwiOiBcIjAuMC4xXCJcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBNlksU0FBUyxlQUFlO0FBRXJhLE9BQU8sV0FBVztBQUNsQixTQUFTLG9CQUFvQjtBQUM3QixPQUFPLFNBQVM7QUFDaEIsWUFBWSxZQUFZO0FBQ3hCLE9BQU8sbUJBQW1COzs7QUM4QnpCLHVCQUFvQjtBQUFBLEVBQ25CLDJCQUEyQjtBQUM1Qjs7O0FEOUJELElBQU0sRUFBRSxVQUFVLGFBQWEsSUFBSTtBQUVuQyxJQUFNQSxvQkFBK0Isb0JBQW9CLENBQUM7QUFHMUQsSUFBTyxzQkFBUSxhQUFhLENBQUMsZUFBZTtBQUFBLEVBQzNDLFNBQVM7QUFBQSxJQUNSLE1BQU07QUFBQSxJQUNOLGNBQWM7QUFBQSxJQUNkLGFBQWE7QUFBQSxNQUNaLFNBQVMsQ0FBQyxzQkFBc0I7QUFBQSxNQUNoQyxTQUFTLENBQUMsSUFBSSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFBQSxJQUN0QyxDQUFDO0FBQUEsSUFDRCxJQUFJO0FBQUEsTUFDSCxTQUFTLENBQUMsaUJBQWlCO0FBQUEsSUFDNUIsQ0FBQztBQUFBLEVBQ0Y7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNOLFFBQU87QUFBQSxJQUNQLEtBQUs7QUFBQSxNQUNKLE9BQU8sUUFBUSxPQUFPLHFCQUFxQjtBQUFBLE1BQzNDLE1BQU07QUFBQSxNQUNOLFNBQVMsQ0FBQyxNQUFNLEtBQUs7QUFBQSxNQUNyQixVQUFVLENBQUMsV0FBVyxTQUFTLE1BQU07QUFBQSxJQUN0QztBQUFBLElBQ0EsZUFBZTtBQUFBLE1BQ2QsVUFBVSxDQUFDLEdBQUcsT0FBTyxLQUFLQSxpQkFBZ0IsQ0FBQztBQUFBLElBQzVDO0FBQUEsRUFDRDtBQUNELEVBQUU7IiwKICAibmFtZXMiOiBbInBlZXJEZXBlbmRlbmNpZXMiXQp9Cg==
