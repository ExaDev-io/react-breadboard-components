// vite.config.ts
import { resolve } from "node:path";
import react from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/@vitejs/plugin-react/dist/index.mjs";
import { defineConfig } from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/vite/dist/node/index.js";
import dts from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/vite-plugin-dts/dist/index.mjs";
import * as EsLint from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/vite-plugin-linter/dist/index.mjs";
import tsConfigPaths from "file:///Users/alex/Desktop/Projects/breadboard-repos/react-breadboard-components/node_modules/vite-tsconfig-paths/dist/index.mjs";

// package.json
var peerDependencies = {
  "@google-labs/breadboard": "^0.11.2"
};

// vite.config.ts
var { EsLinter, linterPlugin } = EsLint;
var peerDependencies2 = peerDependencies || {};
var vite_config_default = defineConfig((configEnv) => ({
  optimizeDeps: {
    esbuildOptions: {
      supported: {
        "top-level-await": true
      }
    }
  },
  plugins: [
    react(),
    tsConfigPaths(),
    linterPlugin({
      include: ["./src}/**/*.{ts,tsx}"],
      linters: [new EsLinter({ configEnv })]
    }),
    dts({
      include: ["src/components/"]
    })
  ],
  build: {
    target: "esnext",
    lib: {
      entry: resolve("src", "components/index.ts"),
      name: "React Breadboard Components",
      formats: ["es", "umd"],
      fileName: (format) => `index.${format}.js`
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies2)]
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2FsZXgvRGVza3RvcC9Qcm9qZWN0cy9icmVhZGJvYXJkLXJlcG9zL3JlYWN0LWJyZWFkYm9hcmQtY29tcG9uZW50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiL1VzZXJzL2FsZXgvRGVza3RvcC9Qcm9qZWN0cy9icmVhZGJvYXJkLXJlcG9zL3JlYWN0LWJyZWFkYm9hcmQtY29tcG9uZW50cy92aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvYWxleC9EZXNrdG9wL1Byb2plY3RzL2JyZWFkYm9hcmQtcmVwb3MvcmVhY3QtYnJlYWRib2FyZC1jb21wb25lbnRzL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJub2RlOnBhdGhcIjtcblxuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiO1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCBkdHMgZnJvbSBcInZpdGUtcGx1Z2luLWR0c1wiO1xuaW1wb3J0ICogYXMgRXNMaW50IGZyb20gXCJ2aXRlLXBsdWdpbi1saW50ZXJcIjtcbmltcG9ydCB0c0NvbmZpZ1BhdGhzIGZyb20gXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI7XG5pbXBvcnQgKiBhcyBwYWNrYWdlSnNvbiBmcm9tIFwiLi9wYWNrYWdlLmpzb25cIjtcbmNvbnN0IHsgRXNMaW50ZXIsIGxpbnRlclBsdWdpbiB9ID0gRXNMaW50O1xuXG5jb25zdCBwZWVyRGVwZW5kZW5jaWVzID0gcGFja2FnZUpzb24ucGVlckRlcGVuZGVuY2llcyB8fCB7fTtcblxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoY29uZmlnRW52KSA9PiAoe1xuXHRvcHRpbWl6ZURlcHM6IHtcblx0XHRlc2J1aWxkT3B0aW9uczoge1xuXHRcdCAgc3VwcG9ydGVkOiB7XG5cdFx0XHRcInRvcC1sZXZlbC1hd2FpdFwiOiB0cnVlXG5cdFx0ICB9LFxuXHRcdH0sXG5cdCAgfSxcblx0cGx1Z2luczogW1xuXHRcdHJlYWN0KCksXG5cdFx0dHNDb25maWdQYXRocygpLFxuXHRcdGxpbnRlclBsdWdpbih7XG5cdFx0XHRpbmNsdWRlOiBbXCIuL3NyY30vKiovKi57dHMsdHN4fVwiXSxcblx0XHRcdGxpbnRlcnM6IFtuZXcgRXNMaW50ZXIoeyBjb25maWdFbnYgfSldLFxuXHRcdH0pLFxuXHRcdGR0cyh7XG5cdFx0XHRpbmNsdWRlOiBbXCJzcmMvY29tcG9uZW50cy9cIl0sXG5cdFx0fSksXG5cdF0sXG5cdGJ1aWxkOiB7XG5cdFx0dGFyZ2V0OlwiZXNuZXh0XCIsXG5cdFx0bGliOiB7XG5cdFx0XHRlbnRyeTogcmVzb2x2ZShcInNyY1wiLCBcImNvbXBvbmVudHMvaW5kZXgudHNcIiksXG5cdFx0XHRuYW1lOiBcIlJlYWN0IEJyZWFkYm9hcmQgQ29tcG9uZW50c1wiLFxuXHRcdFx0Zm9ybWF0czogW1wiZXNcIiwgXCJ1bWRcIl0sXG5cdFx0XHRmaWxlTmFtZTogKGZvcm1hdCkgPT4gYGluZGV4LiR7Zm9ybWF0fS5qc2AsXG5cdFx0fSxcblx0XHRyb2xsdXBPcHRpb25zOiB7XG5cdFx0XHRleHRlcm5hbDogWy4uLk9iamVjdC5rZXlzKHBlZXJEZXBlbmRlbmNpZXMpXSxcblx0XHR9LFxuXHR9LFxufSkpO1xuIiwgIntcblx0XCJkZXBlbmRlbmNpZXNcIjoge1xuXHRcdFwiQGV4YWRldi9icmVhZGJvYXJkLWtpdHNcIjogXCJeMC4xMC4xXCIsXG5cdFx0XCJAZ29vZ2xlLWxhYnMvYnJlYWRib2FyZC11aVwiOiBcIl4wLjMuMFwiLFxuXHRcdFwiQGdvb2dsZS1sYWJzL2JyZWFkYm9hcmQtd2ViXCI6IFwiXjEuMy4xXCIsXG5cdFx0XCJAbGl0L3JlYWN0XCI6IFwiXjEuMC4zXCIsXG5cdFx0XCJwdXBwZXRlZXJcIjogXCJeMjIuNi4xXCIsXG5cdFx0XCJyZWFjdFwiOiBcIl4xOC4yLjBcIixcblx0XHRcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjBcIlxuXHR9LFxuXHRcImRldkRlcGVuZGVuY2llc1wiOiB7XG5cdFx0XCJAdHlwZXMvbm9kZVwiOiBcIl4yMC4xMS4yMlwiLFxuXHRcdFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjIuNjBcIixcblx0XHRcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMi4xOVwiLFxuXHRcdFwiQHR5cGVzY3JpcHQtZXNsaW50L2VzbGludC1wbHVnaW5cIjogXCJeNy4xLjBcIixcblx0XHRcIkB0eXBlc2NyaXB0LWVzbGludC9wYXJzZXJcIjogXCJeNy4xLjBcIixcblx0XHRcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI6IFwiXjQuMi4xXCIsXG5cdFx0XCJlc2xpbnRcIjogXCJeOC41Ny4wXCIsXG5cdFx0XCJlc2xpbnQtcGx1Z2luLXJlYWN0LWhvb2tzXCI6IFwiXjQuNi4wXCIsXG5cdFx0XCJlc2xpbnQtcGx1Z2luLXJlYWN0LXJlZnJlc2hcIjogXCJeMC40LjVcIixcblx0XHRcInR5cGVzY3JpcHRcIjogXCJeNS4zLjNcIixcblx0XHRcInZpdGVcIjogXCJeNS4xLjRcIixcblx0XHRcInZpdGUtcGx1Z2luLWR0c1wiOiBcIl4zLjcuM1wiLFxuXHRcdFwidml0ZS1wbHVnaW4tbGludGVyXCI6IFwiXjIuMS4xXCIsXG5cdFx0XCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI6IFwiXjQuMy4xXCJcblx0fSxcblx0XCJleHBvcnRzXCI6IHtcblx0XHRcIi5cIjoge1xuXHRcdFx0XCJpbXBvcnRcIjogXCIuL2Rpc3QvaW5kZXguZXMuanNcIixcblx0XHRcdFwicmVxdWlyZVwiOiBcIi4vZGlzdC9pbmRleC51bWQuanNcIlxuXHRcdH0sXG5cdFx0XCIuL2Rpc3Qvc3R5bGUuY3NzXCI6IFwiLi9kaXN0L3N0eWxlLmNzc1wiXG5cdH0sXG5cdFwiZmlsZXNcIjogW1xuXHRcdFwiZGlzdFwiXG5cdF0sXG5cdFwibWFpblwiOiBcIi4vZGlzdC9pbmRleC51bWQuanNcIixcblx0XCJtb2R1bGVcIjogXCIuL2Rpc3QvaW5kZXguZXMuanNcIixcblx0XCJuYW1lXCI6IFwicmVhY3QtYnJlYWRib2FyZC1jb21wb25lbnRzXCIsXG5cdFwicGVlckRlcGVuZGVuY2llc1wiOiB7XG5cdFx0XCJAZ29vZ2xlLWxhYnMvYnJlYWRib2FyZFwiOiBcIl4wLjExLjJcIlxuXHR9LFxuXHRcInJlcG9zaXRvcnlcIjoge1xuXHRcdFwidHlwZVwiOiBcImdpdFwiLFxuXHRcdFwidXJsXCI6IFwiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9FeGFEZXYtaW8vcmVhY3QtYnJlYWRib2FyZC1jb21wb25lbnRzLmdpdFwiXG5cdH0sXG5cdFwic2NyaXB0c1wiOiB7XG5cdFx0XCJidWlsZFwiOiBcInRzYyAmJiB2aXRlIGJ1aWxkXCIsXG5cdFx0XCJkZXZcIjogXCJ2aXRlIC0tb3BlblwiLFxuXHRcdFwibGludFwiOiBcImVzbGludCAuIC0tZXh0IHRzLHRzeCAtLXJlcG9ydC11bnVzZWQtZGlzYWJsZS1kaXJlY3RpdmVzIC0tbWF4LXdhcm5pbmdzIDBcIixcblx0XHRcInByZXBhY2tcIjogXCJucG0gcnVuIGJ1aWxkXCIsXG5cdFx0XCJwcmVwdWJsaXNoT25seVwiOiBcImdpdCBwdXNoIC0tZm9sbG93LXRhZ3NcIixcblx0XHRcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXcgLS1vcGVuXCJcblx0fSxcblx0XCJ0eXBlXCI6IFwibW9kdWxlXCIsXG5cdFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiLFxuXHRcInZlcnNpb25cIjogXCIwLjAuMVwiXG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQTZZLFNBQVMsZUFBZTtBQUVyYSxPQUFPLFdBQVc7QUFDbEIsU0FBUyxvQkFBb0I7QUFDN0IsT0FBTyxTQUFTO0FBQ2hCLFlBQVksWUFBWTtBQUN4QixPQUFPLG1CQUFtQjs7O0FDaUN6Qix1QkFBb0I7QUFBQSxFQUNuQiwyQkFBMkI7QUFDNUI7OztBRGpDRCxJQUFNLEVBQUUsVUFBVSxhQUFhLElBQUk7QUFFbkMsSUFBTUEsb0JBQStCLG9CQUFvQixDQUFDO0FBRzFELElBQU8sc0JBQVEsYUFBYSxDQUFDLGVBQWU7QUFBQSxFQUMzQyxjQUFjO0FBQUEsSUFDYixnQkFBZ0I7QUFBQSxNQUNkLFdBQVc7QUFBQSxRQUNaLG1CQUFtQjtBQUFBLE1BQ2xCO0FBQUEsSUFDRjtBQUFBLEVBQ0M7QUFBQSxFQUNGLFNBQVM7QUFBQSxJQUNSLE1BQU07QUFBQSxJQUNOLGNBQWM7QUFBQSxJQUNkLGFBQWE7QUFBQSxNQUNaLFNBQVMsQ0FBQyxzQkFBc0I7QUFBQSxNQUNoQyxTQUFTLENBQUMsSUFBSSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFBQSxJQUN0QyxDQUFDO0FBQUEsSUFDRCxJQUFJO0FBQUEsTUFDSCxTQUFTLENBQUMsaUJBQWlCO0FBQUEsSUFDNUIsQ0FBQztBQUFBLEVBQ0Y7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNOLFFBQU87QUFBQSxJQUNQLEtBQUs7QUFBQSxNQUNKLE9BQU8sUUFBUSxPQUFPLHFCQUFxQjtBQUFBLE1BQzNDLE1BQU07QUFBQSxNQUNOLFNBQVMsQ0FBQyxNQUFNLEtBQUs7QUFBQSxNQUNyQixVQUFVLENBQUMsV0FBVyxTQUFTLE1BQU07QUFBQSxJQUN0QztBQUFBLElBQ0EsZUFBZTtBQUFBLE1BQ2QsVUFBVSxDQUFDLEdBQUcsT0FBTyxLQUFLQSxpQkFBZ0IsQ0FBQztBQUFBLElBQzVDO0FBQUEsRUFDRDtBQUNELEVBQUU7IiwKICAibmFtZXMiOiBbInBlZXJEZXBlbmRlbmNpZXMiXQp9Cg==
